# -*- coding: utf-8 -*-
"""OpenCV.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F_iTeOayX6h4uOsocUr2A_3J3gV1Dfc7

Image processing
"""

import numpy as np
import cv2


arr = np.arange(10)
print(arr)

arr_A = np.array([[3,8,2,4,6],
                 [1,5,9,3,7],
                 [6,2,7,4,9],
                 [4,3,1,6,8],
                 [9,7,5,2,1]])
arr_B = np.array([[5,2,6,1,3],
                 [9,4,7,2,8],
                 [2,6,3,9,1],
                 [7,5,8,3,6],
                 [1,3,9,4,2]])
# sum
arr_C = arr_A + arr_B
# multiply
arr_D = arr_A.dot(arr_B) # or (arr_A @ arr_B) or np.matmul(arr_A,arr_B)
print(arr_C)
print(arr_D)

# All 0s matrix
np.zeros((2,3))

# All 1s matrix
np.ones((4,2,2), dtype='int32')

# Any other number
np.full((2,2), 99)

# Random decimal numbers
np.random.rand(4,2)

# Random Integer values
np.random.randint(-8,8, size=(3,3))

# The identity matrix
np.identity(5)

# Repeat an array
arr = np.array([[1,2,3]])
repeat_arr = np.repeat(arr,3, axis=0)
print(repeat_arr)

# reshape matrix
before = np.array([[1,2,3,4],[5,6,7,8]])
print(before)
after = before.reshape(4,2)
print(after)

# Vertically stacking vectors
v1 = np.array([1, 2, 3, 4])
v2 = np.array([5, 6, 7, 8])
np.vstack([v1, v2])

# Horizontal  stack
h1 = np.ones((2, 4))
h2 = np.zeros((2, 2))
np.hstack((h1, h2))

# version of opencv
cv2.__version__

# read and show image
img = cv2.imread('messi.jpg')
cv2.imshow(img)

# get shape of image
img.shape

# convert color img to gray img
'''
fomula to convert
def convert_rgb_to_gray(img):
  red   = 0.299 * img[:,:,0]
  green = 0.587 * img[:,:,1]
  blue  = 0.114 * img[:,:,2]
'''
gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
cv2.imshow(gray_img)

gray_img.shape

# write image
cv2.imwrite("gray_img.jpg", gray_img)

# Get (R,G,B) at random pixel (300,400)
(R, G, B) = img[300, 400]
print(f"R = {R}, G = {G}, B = {B}")

# Slice image
slice_img = img[100:350,400:600]
cv2.imshow(slice_img)

# Resize image
resized_img = cv2.resize(img, (300, 300))
cv2.imshow(resized_img)

# Flip image
backflip_img = cv2.flip(img,0)
cv2.imshow(backflip_img)
